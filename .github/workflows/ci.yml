name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # 配置需要构建的网站
  SITES: |
    gmail|https://mail.google.com/mail/u/0/#inbox
    github|https://github.com
    chatgpt|https://chat.openai.com
    xai|https://grok.com/chat
    protonmail|https://mail.proton.me
    douyutv|https://www.douyu.com/directory/myFollow
    youtube|https://www.youtube.com

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js and NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get latest stable Electron version
        id: electron
        run: |
          ELECTRON_VERSION=$(npm view electron version)
          echo "version=$ELECTRON_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Latest stable Electron version: $ELECTRON_VERSION"

      - name: Install Nativefier
        run: npm install -g nativefier

      - name: Create injection script
        run: |
          cat << 'EOF' > inject.js
          const { app } = require('electron');
          window.addEventListener('DOMContentLoaded', () => {
            const electronVersion = process.versions.electron;
            const originalTitle = document.title;
            document.title = `${originalTitle} - Electron v${electronVersion}`;
          });
          EOF

      - name: Build applications
        env:
          ELECTRON_VERSION: ${{ steps.electron.outputs.version }}
        run: |
          echo "🚀 Building applications with Electron v$ELECTRON_VERSION"
          echo ""
          
          # 解析配置并构建每个应用
          echo "$SITES" | grep -v '^[[:space:]]*$' | while IFS='|' read -r name url; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 Building: $name"
            echo "🌐 URL: $url"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            nativefier "$url" \
              --name "$name" \
              --electron-version "$ELECTRON_VERSION" \
              --platform linux \
              --arch x64 \
              --portable \
              --internal-urls ".*" \
              --inject inject.js \
              --verbose
            
            # 查找生成的目录并压缩
            app_dir=$(find . -maxdepth 1 -type d -name "${name}*linux-x64" | head -n 1)
            
            if [ -n "$app_dir" ]; then
              zip_name="${name}_linux_x64.zip"
              echo "📦 Packaging: $zip_name"
              zip -r "$zip_name" "$app_dir"
              rm -rf "$app_dir"
              echo "✅ Successfully built: $zip_name"
            else
              echo "❌ Failed to find build directory for $name"
            fi
            
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✨ All builds completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ls -lh *.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: "*.zip"
          compression-level: 0
